<!DOCTYPE html>
<html lang="nl">
<head>
    <title>Plug and Play Demonstrator</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        h1, h2 {
            font-size: 32 px;
        }
        .chart-grid {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 20px;
        }
        canvas {
            width: 100% !important;
            height: 300px !important;
        }
    </style>
</head>
<body>

<h1>Grafieken Temperatuur en Vochtigheid</h1>

<div class="chart-grid">
    <canvas id="sensorbuitenmuur"></canvas>
    <canvas id="sensorbinnenmuur"></canvas>
    <canvas id="sensorhoek"></canvas>
    <canvas id="sensorvloer"></canvas>
    <canvas id="sensorraam"></canvas>
    <canvas id="sensorruimte"></canvas>
</div>

<h2>Downloads</h2>
<ul>
    <li><a href="/download/sensorbuitenmuur.csv"><button>Download sensorbuitenmuur CSV</button></a></li>
    <li><a href="/download/sensorbinnenmuur.csv"><button>Download sensorbinnenmuur CSV</button></a></li>
    <li><a href="/download/sensorhoek.csv"><button>Download sensorhoek CSV</button></a></li>
    <li><a href="/download/sensorvloer.csv"><button>Download sensorvloer CSV</button></a></li>
    <li><a href="/download/sensorraam.csv"><button>Download sensorraam CSV</button></a></li>
    <li><a href="/download/sensorruimte.csv"><button>Download sensorruimte CSV</button></a></li>
    <li><a href="/download/weerdata.csv"><button>Download windrichting CSV</button></a></li>
    <li><a href="/download/weer_speed.csv"><button>Download windsnelheid CSV</button></a></li>
</ul>

<h2>Alle CSV-bestanden in één ZIP</h2>
<a href="/download/all-csvs.zip">
    <button>Download Alle CSV's als ZIP</button>
</a>

<h2>Laatste foutmelding</h2>
<div style="border: 1px solid #cc0000; padding: 10px; background-color: #ffe6e6;">
    <strong>Bestand:</strong> <span id="error-source">{{ latest_error.source }}</span><br>
    <strong>Tijdstip:</strong> <span id="error-timestamp">{{ latest_error.timestamp }}</span><br>
    <strong>Temp en humidity:</strong> <span id="error-description">{{ latest_error.description }}</span>
</div>

<script>
    function updateLatestError() {
        fetch('/latest-error')
            .then(response => response.json())
            .then(data => {
                document.getElementById('error-source').textContent = data.source;
                document.getElementById('error-timestamp').textContent = data.timestamp;
                document.getElementById('error-description').textContent = data.description;
            })
            .catch(error => console.error('Error fetching the latest error:', error));
    }

    setInterval(updateLatestError, 60000);

    const sensorFiles = [
        "sensorbuitenmuur",
        "sensorbinnenmuur",
        "sensorhoek",
        "sensorvloer",
        "sensorraam",
        "sensorruimte"
    ];

    const charts = {};


    function loadChart(sensorId) {
        fetch(`/graph-data/${sensorId}.csv`)
            .then(response => response.json())
            .then(data => {
                // Beperk tot de laatste 288 datapunten
                const totalPoints = data.timestamps.length;
                const startIndex = Math.max(0, totalPoints - 288);

                const timestamps = data.timestamps.slice(startIndex);
                const temperatures = data.temperatures.slice(startIndex);
                const humidities = data.humidities.slice(startIndex);

                const ctx = document.getElementById(sensorId).getContext('2d');

                // Vernieuw bestaande grafiek als die al bestaat
                if (charts[sensorId]) {
                    charts[sensorId].data.labels = timestamps;
                    charts[sensorId].data.datasets[0].data = temperatures;
                    charts[sensorId].data.datasets[1].data = humidities;
                    charts[sensorId].update();
                } else {
                    charts[sensorId] = new Chart(ctx, {
                        type: 'line',
                        data: {
                            labels: timestamps,
                            datasets: [
                                {
                                    label: 'Temperatuur (°C)',
                                    data: temperatures,
                                    borderColor: 'rgb(255, 99, 132)',
                                    fill: false
                                },
                                {
                                    label: 'Luchtvochtigheid (%)',
                                    data: humidities,
                                    borderColor: 'rgb(54, 162, 235)',
                                    fill: false
                                }
                            ]
                        },
                        options: {
                            responsive: true,
                            maintainAspectRatio: false,
                            plugins: {
                                title: {
                                    display: true,
                                    text: `${sensorId}`,
                                    font: {
                                        size: 56 // Grotere titel
                                    }
                                },
                                legend: {
                                    labels: {
                                        font: {
                                            size: 32 // Grotere legenda
                                        }
                                    }
                                }
                            },

                            scales: {
                                x: {
                                    title: { display: false },
                                    ticks: {
                                        callback: function(value, index, ticks) {
                                            // Toon slechts elke 24e datapunt (2 uur bij 5-minuten intervallen)
                                            return index % 24 === 0 ? this.getLabelForValue(value) : '';
                                        },
                                            font: {
                                                size: 32
                                            }
                                    }
                                },

                                y: {
                                    title: { display: false },
                                    ticks: {
                                        font: {
                                            size: 32
                                        }
                                    }
                                }
                            }
                        }
                    });
                }
            });
    }

    // Laad alle grafieken bij het laden van de pagina
    sensorFiles.forEach(loadChart);

    // Vernieuw alle grafieken elke 60 seconden
    setInterval(() => {
        sensorFiles.forEach(sensorId => {
            loadChart(sensorId);
        });
    }, 60000);
</script>

</body>
</html>
